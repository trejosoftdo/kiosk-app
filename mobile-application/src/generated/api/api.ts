/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1.0
 * 
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as url from "url";
import isomorphicFetch from "isomorphic-fetch";
import { Configuration } from "./configuration";

const BASE_PATH = "/".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = isomorphicFetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name = "RequiredError"
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * 
 * @export
 * @interface AuthorizeDeviceResponse
 */
export interface AuthorizeDeviceResponse {
    /**
     * 
     * @type {AuthorizeDeviceResponseData}
     * @memberof AuthorizeDeviceResponse
     */
    data: AuthorizeDeviceResponseData;
}
/**
 * 
 * @export
 * @interface AuthorizeDeviceResponseData
 */
export interface AuthorizeDeviceResponseData {
    /**
     * 
     * @type {string}
     * @memberof AuthorizeDeviceResponseData
     */
    deviceCode: string;
    /**
     * 
     * @type {string}
     * @memberof AuthorizeDeviceResponseData
     */
    userCode: string;
    /**
     * 
     * @type {number}
     * @memberof AuthorizeDeviceResponseData
     */
    expiresIn: number;
    /**
     * 
     * @type {number}
     * @memberof AuthorizeDeviceResponseData
     */
    interval: number;
    /**
     * 
     * @type {string}
     * @memberof AuthorizeDeviceResponseData
     */
    verificationURI: string;
}
/**
 * 
 * @export
 * @interface GetTokensPayload
 */
export interface GetTokensPayload {
    /**
     * 
     * @type {string}
     * @memberof GetTokensPayload
     */
    deviceCode: string;
}
/**
 * 
 * @export
 * @interface GetTokensResponse
 */
export interface GetTokensResponse {
    /**
     * 
     * @type {GetTokensResponseData}
     * @memberof GetTokensResponse
     */
    data: GetTokensResponseData;
}
/**
 * 
 * @export
 * @interface GetTokensResponseData
 */
export interface GetTokensResponseData {
    /**
     * 
     * @type {string}
     * @memberof GetTokensResponseData
     */
    accessToken: string;
    /**
     * 
     * @type {string}
     * @memberof GetTokensResponseData
     */
    refreshToken: string;
    /**
     * 
     * @type {number}
     * @memberof GetTokensResponseData
     */
    expiresIn: number;
    /**
     * 
     * @type {number}
     * @memberof GetTokensResponseData
     */
    refreshExpiresIn: number;
}
/**
 * 
 * @export
 * @interface HTTPValidationError
 */
export interface HTTPValidationError {
    /**
     * 
     * @type {Array<ValidationError>}
     * @memberof HTTPValidationError
     */
    detail?: Array<ValidationError>;
}
/**
 * 
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
    /**
     * 
     * @type {Array<string>}
     * @memberof ValidationError
     */
    loc: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    msg: string;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    type: string;
}
/**
 * AuthApi - fetch parameter creator
 * @export
 */
export const AuthApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Authorize a device to a realm in context  Args:     realm (str): The realm in context  Returns:     models.AuthorizeDeviceResponse: Authorization information such as deviceCode, and userCode.
         * @summary Authorize Device
         * @param {string} realm 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authorizeDeviceAuthRealmDeviceGet(realm: string, options: any = {}): FetchArgs {
            // verify required parameter 'realm' is not null or undefined
            if (realm === null || realm === undefined) {
                throw new RequiredError('realm','Required parameter realm was null or undefined when calling authorizeDeviceAuthRealmDeviceGet.');
            }
            const localVarPath = `/auth/{realm}/device`
                .replace(`{${"realm"}}`, encodeURIComponent(String(realm)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets the authorization tokens for the given device code and realm in context  Args:     realm (str): The realm in context     item (models.GetTokensPayload): The required payload  Returns:     models.GetTokensResponse: The authorization tokens information
         * @summary Get Auth Tokens
         * @param {GetTokensPayload} body 
         * @param {string} realm 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthTokensAuthRealmTokensPost(body: GetTokensPayload, realm: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling getAuthTokensAuthRealmTokensPost.');
            }
            // verify required parameter 'realm' is not null or undefined
            if (realm === null || realm === undefined) {
                throw new RequiredError('realm','Required parameter realm was null or undefined when calling getAuthTokensAuthRealmTokensPost.');
            }
            const localVarPath = `/auth/{realm}/tokens`
                .replace(`{${"realm"}}`, encodeURIComponent(String(realm)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"GetTokensPayload" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Authorize a device to a realm in context  Args:     realm (str): The realm in context  Returns:     models.AuthorizeDeviceResponse: Authorization information such as deviceCode, and userCode.
         * @summary Authorize Device
         * @param {string} realm 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authorizeDeviceAuthRealmDeviceGet(realm: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<AuthorizeDeviceResponse> {
            const localVarFetchArgs = AuthApiFetchParamCreator(configuration).authorizeDeviceAuthRealmDeviceGet(realm, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Gets the authorization tokens for the given device code and realm in context  Args:     realm (str): The realm in context     item (models.GetTokensPayload): The required payload  Returns:     models.GetTokensResponse: The authorization tokens information
         * @summary Get Auth Tokens
         * @param {GetTokensPayload} body 
         * @param {string} realm 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthTokensAuthRealmTokensPost(body: GetTokensPayload, realm: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<GetTokensResponse> {
            const localVarFetchArgs = AuthApiFetchParamCreator(configuration).getAuthTokensAuthRealmTokensPost(body, realm, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * Authorize a device to a realm in context  Args:     realm (str): The realm in context  Returns:     models.AuthorizeDeviceResponse: Authorization information such as deviceCode, and userCode.
         * @summary Authorize Device
         * @param {string} realm 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authorizeDeviceAuthRealmDeviceGet(realm: string, options?: any) {
            return AuthApiFp(configuration).authorizeDeviceAuthRealmDeviceGet(realm, options)(fetch, basePath);
        },
        /**
         * Gets the authorization tokens for the given device code and realm in context  Args:     realm (str): The realm in context     item (models.GetTokensPayload): The required payload  Returns:     models.GetTokensResponse: The authorization tokens information
         * @summary Get Auth Tokens
         * @param {GetTokensPayload} body 
         * @param {string} realm 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthTokensAuthRealmTokensPost(body: GetTokensPayload, realm: string, options?: any) {
            return AuthApiFp(configuration).getAuthTokensAuthRealmTokensPost(body, realm, options)(fetch, basePath);
        },
    };
};

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * Authorize a device to a realm in context  Args:     realm (str): The realm in context  Returns:     models.AuthorizeDeviceResponse: Authorization information such as deviceCode, and userCode.
     * @summary Authorize Device
     * @param {string} realm 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authorizeDeviceAuthRealmDeviceGet(realm: string, options?: any) {
        return AuthApiFp(this.configuration).authorizeDeviceAuthRealmDeviceGet(realm, options)(this.fetch, this.basePath);
    }

    /**
     * Gets the authorization tokens for the given device code and realm in context  Args:     realm (str): The realm in context     item (models.GetTokensPayload): The required payload  Returns:     models.GetTokensResponse: The authorization tokens information
     * @summary Get Auth Tokens
     * @param {GetTokensPayload} body 
     * @param {string} realm 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public getAuthTokensAuthRealmTokensPost(body: GetTokensPayload, realm: string, options?: any) {
        return AuthApiFp(this.configuration).getAuthTokensAuthRealmTokensPost(body, realm, options)(this.fetch, this.basePath);
    }

}
